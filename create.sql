-- Create Tables --
CREATE TABLE UNTERNEHMEN (
    ID INTEGER NOT NULL,
    NAME VARCHAR (100) NOT NULL,
    COUNTRY VARCHAR(10) CONSTRAINT PK_UNTERNEHMENSNAME PRIMARY KEY (NAME)
);

CREATE TABLE MITARBEITER (
    MITARBEITERID VARCHAR(10) NOT NULL,
    VORNAME VARCHAR(30) NOT NULL,
    NACHNAME VARCHAR(30) NOT NULL,
    GEBURTSDATUM DATE,
    GESCHLECHT CHAR(1),
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    CONSTRAINT PK_MITARBEITERID PRIMARY KEY (MITARBEITERID),
    CONSTRAINT FK_UNTERNEHMENSNAME FOREIGN KEY(UNTERNEHMENSNAME) REFERENCES UNTERNEHMEN(NAME) ON DELETE CASCADE,
    CONSTRAINT MITARBEITER_GESCHLECHT CHECK(GESCHLECHT IN ('m', 'f', 'd'))
);

CREATE TABLE AUTOMATISIERUNGSTECHNIKER(
    AUTOMATISIERUNGSTECHNIKER_ID VARCHAR(10) NOT NULL,
    GEHALT DECIMAL(10, 2),
    EMAIL VARCHAR(70),
    LAPTOP VARCHAR(100),
    CONSTRAINT PK_AUTOMTECHID PRIMARY KEY(AUTOMATISIERUNGSTECHNIKER_ID),
    CONSTRAINT FK_AUTOMTECHID FOREIGN KEY(AUTOMATISIERUNGSTECHNIKER_ID) REFERENCES MITARBEITER(MITARBEITERID) ON DELETE CASCADE
);

CREATE TABLE KONSTRUKTEUR(
    KONSTRUKTEUR_ID VARCHAR(10) NOT NULL,
    SVNUMMER INTEGER,
    AUSRUESTUNG VARCHAR(255),
    AUSBILDUNG CHAR(1),
    CONSTRAINT PK_KONSTRUKTEURID PRIMARY KEY(KONSTRUKTEUR_ID),
    CONSTRAINT FK_KONSTRUKTUERID FOREIGN KEY(KONSTRUKTEUR_ID) REFERENCES MITARBEITER(MITARBEITERID),
    CONSTRAINT SELBSTVERSICHERUNGSNUMMER UNIQUE(SVNUMMER),
    CONSTRAINT AUSBILDUNG_VORHANDEN CHECK(AUSBILDUNG IN ('j', 'n'))
);

CREATE TABLE PROJEKT (
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    PROJEKTNUMMER INTEGER NOT NULL,
    PROJEKTNAME VARCHAR(100) NOT NULL,
    BUDGET REAL,
    DEADLINE DATE,
    CONSTRAINT PK_PROJEKT PRIMARY KEY(UNTERNEHMENSNAME, PROJEKTNUMMER),
    CONSTRAINT FK_UNTERNEHMENSNAME_IN_PROJEKTTABLE FOREIGN KEY(UNTERNEHMENSNAME) REFERENCES UNTERNEHMEN(NAME)
);

CREATE TABLE FLUGZEUG (
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    PROJEKTNUMMER_FUER_FLUGZEUG INTEGER NOT NULL,
    OBJEKTID VARCHAR2(30) NOT NULL,
    MODEL VARCHAR(100) NOT NULL,
    LAENGE REAL,
    BREITE REAL,
    HOEHE REAL,
    CONSTRAINT PK_PROJEKT_FUER_FLUGZEUGKOMPONENTE PRIMARY KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_FLUGZEUG, OBJEKTID),
    CONSTRAINT FK_PROJEKTNUMMER_FUER_FLUGZEUGKOMONENTE FOREIGN KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_FLUGZEUG) REFERENCES PROJEKT(UNTERNEHMENSNAME, PROJEKTNUMMER)
);

CREATE TABLE PRUEFANLAGE (
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    PROJEKTNUMMER_FUER_PRUEFANLAGE INTEGER NOT NULL,
    PRUEFANLAGENNUMMER VARCHAR(30) NOT NULL,
    BEAUFSICHTSPERSON INTEGER,
    CONSTRAINT PK_PRUEFANLAGENNUMMER PRIMARY KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_PRUEFANLAGE, PRUEFANLAGENNUMMER),
    CONSTRAINT FK_PROJEKTNUMMER FOREIGN KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_PRUEFANLAGE) REFERENCES PROJEKT(UNTERNEHMENSNAME, PROJEKTNUMMER),
    CONSTRAINT ANZAHL_DER_BEAUFSICHTSPERSONEN CHECK(BEAUFSICHTSPERSON BETWEEN 1 AND 10)
);

CREATE TABLE HERSTELLUNG (
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    PROJEKTNUMMER_FUER_FLUGZEUG INTEGER NOT NULL,
    OBJEKTID VARCHAR(30) NOT NULL,
    KONSTRUKTEUR_ID VARCHAR(10) NOT NULL,
    HERSTELLUNGSDAUER INTEGER,
    CONSTRAINT FK_PROJEKT FOREIGN KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_FLUGZEUG, OBJEKTID) REFERENCES FLUGZEUG(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_FLUGZEUG, OBJEKTID),
    CONSTRAINT FK_KONSTRUKTUER_ID FOREIGN KEY(KONSTRUKTEUR_ID) REFERENCES KONSTRUKTEUR(KONSTRUKTEUR_ID)
);

CREATE TABLE AUTOMATISIERUNG (
    AUTOMATISIERUNGSTECHNIKERID VARCHAR(10) NOT NULL,
    UNTERNEHMENSNAME VARCHAR(100) NOT NULL,
    PROJEKTNUMMER_FUER_PRUEFANLAGE INTEGER NOT NULL,
    PRUEFANLAGENNUMMER VARCHAR(30) NOT NULL,
    CONSTRAINT FK_AUTOM_ID FOREIGN KEY(AUTOMATISIERUNGSTECHNIKERID) REFERENCES AUTOMATISIERUNGSTECHNIKER(AUTOMATISIERUNGSTECHNIKER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_PRUEF_NUMMER FOREIGN KEY(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_PRUEFANLAGE, PRUEFANLAGENNUMMER) REFERENCES PRUEFANLAGE(UNTERNEHMENSNAME, PROJEKTNUMMER_FUER_PRUEFANLAGE, PRUEFANLAGENNUMMER) ON DELETE CASCADE
);



 --- Create Sequences ---
CREATE SEQUENCE SEQ_UNTERNEHMEN_ID START WITH 1 MINVALUE 1 INCREMENT BY 1 CACHE 100;

CREATE SEQUENCE SEQ_PROJEKT_NUMMER START WITH 1;

--- Create Triggers ---
CREATE OR REPLACE TRIGGER TRI_UNTERNEHMEN_ID BEFORE
    INSERT ON UNTERNEHMEN FOR EACH ROW
BEGIN
    SELECT
        SEQ_UNTERNEHMEN_ID.NEXTVAL INTO :NEW.ID
    FROM
        DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRI_MITARBEITER_ID BEFORE
    INSERT ON MITARBEITER FOR EACH ROW
BEGIN
    IF :NEW.MITARBEITERID IS NULL THEN
        :NEW.MITARBEITERID := DBMS_RANDOM.STRING('x', 10);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRI_PROJEKT_NUMMER BEFORE
    INSERT ON PROJEKT FOR EACH ROW
BEGIN
    SELECT
        SEQ_PROJEKT_NUMMER.NEXTVAL INTO :NEW.PROJEKTNUMMER
    FROM
        DUAL;
END;
/

--- Create Procedures ---
CREATE OR REPLACE PROCEDURE P_DELETE_UNTERNEHMEN(
    P_UNTERNEHMEN_ID IN INTEGER,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM UNTERNEHMEN
    WHERE
        P_UNTERNEHMEN_ID = UNTERNEHMEN.ID;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_UNTERNEHMEN;
/

CREATE OR REPLACE PROCEDURE P_DELETE_MITARBEITER(
    P_MITARBEITER_ID IN VARCHAR,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM MITARBEITER
    WHERE
        P_MITARBEITER_ID = MITARBEITER.MITARBEITERID;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_MITARBEITER;
/

CREATE OR REPLACE PROCEDURE P_UPDATE_MITARBEITER(
    P_MITARBEITER_ID IN VARCHAR,
    P_UNTERNEHMEN_NAME IN VARCHAR
) AS
BEGIN
    UPDATE MITARBEITER
    SET UNTERNEHMENSNAME = P_UNTERNEHMEN_NAME
    WHERE MITARBEITERID = P_MITARBEITER_ID;

END;
/

CREATE OR REPLACE PROCEDURE P_DELETE_AUTOMATISIERUNGSTECHNIKER(
    P_AUTOMATISIERUNGSTECHNIKER_ID IN VARCHAR,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM AUTOMATISIERUNGSTECHNIKER
    WHERE
        P_AUTOMATISIERUNGSTECHNIKER_ID = AUTOMATISIERUNGSTECHNIKER.AUTOMATISIERUNGSTECHNIKER_ID;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_AUTOMATISIERUNGSTECHNIKER;
/

CREATE OR REPLACE PROCEDURE P_UPDATE_AUTOMATISIERUNGSTECHNIKER(
    P_AUTOMATISIERUNGSTECHNIKER_ID IN VARCHAR,
    P_GEHALT IN REAL
) AS
BEGIN
    UPDATE AUTOMATISIERUNGSTECHNIKER
    SET GEHALT = P_GEHALT
    WHERE AUTOMATISIERUNGSTECHNIKER_ID = P_AUTOMATISIERUNGSTECHNIKER_ID;
END;
/

CREATE OR REPLACE PROCEDURE P_DELETE_KONSTRUKTEUR(
    P_KONSTRUKTEUR_ID IN VARCHAR,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM KONSTRUKTEUR
    WHERE
        P_KONSTRUKTEUR_ID = KONSTRUKTEUR.KONSTRUKTEUR_ID;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_KONSTRUKTEUR;
/

CREATE OR REPLACE PROCEDURE P_DELETE_PROJEKT(
    P_PROJEKT_NUMMER IN INTEGER,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM PROJEKT
    WHERE
        P_PROJEKT_NUMMER = PROJEKT.PROJEKTNUMMER;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_PROJEKT;
/

CREATE OR REPLACE PROCEDURE P_DELETE_FLUGZEUG(
    P_UNTERNEHMEN_NAME IN VARCHAR,
    P_FLUGZEUG_ID IN VARCHAR,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM FLUGZEUG
    WHERE
        P_UNTERNEHMEN_NAME = FLUGZEUG.UNTERNEHMENSNAME
        AND P_FLUGZEUG_ID = FLUGZEUG.OBJEKTID;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_FLUGZEUG;
/

CREATE OR REPLACE PROCEDURE P_DELETE_PRUEFANLAGE(
    P_UNTERNEHMEN_NAME IN VARCHAR,
    P_PROJEKT_ID IN NUMBER,
    P_PRUEFANLAGE_ID IN INTEGER,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM PRUEFANLAGE
    WHERE
        P_UNTERNEHMEN_NAME = PRUEFANLAGE.UNTERNEHMENSNAME
        AND P_PROJEKT_ID = PRUEFANLAGE.PROJEKTNUMMER_FUER_PRUEFANLAGE
        AND P_PRUEFANLAGE_ID = PRUEFANLAGE.PRUEFANLAGENNUMMER;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_PRUEFANLAGE;
/

CREATE OR REPLACE PROCEDURE P_DELETE_HERSTELLUNG(
    P_UNTERNEHMEN_NAME IN VARCHAR,
    P_PROJEKT_ID IN NUMBER,
    P_MATERIAL_ID IN NUMBER,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM HERSTELLUNG
    WHERE
        P_UNTERNEHMEN_NAME = HERSTELLUNG.UNTERNEHMENSNAME
        AND P_PROJEKT_ID = HERSTELLUNG.PROJEKTNUMMER_FUER_FLUGZEUGKOMPONENTE
        AND P_MATERIAL_ID = HERSTELLUNG.MATERIALNUMMER;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_HERSTELLUNG;
/

CREATE OR REPLACE PROCEDURE P_DELETE_AUTOMATISIERUNG(
    P_AUTOMATISIERUNGSTECHNIKER_ID IN VARCHAR,
    P_UNTERNEHMEN_NAME IN VARCHAR,
    P_PROJEKT_ID IN NUMBER,
    P_PRUEFANLAGE_ID IN NUMBER,
    P_ERROR_CODE OUT NUMBER
) AS
BEGIN
    DELETE FROM AUTOMATISIERUNG
    WHERE
        P_AUTOMATISIERUNGSTECHNIKER_ID = AUTOMATISIERUNG.AUTOMATISIERUNGSTECHNIKERID
        AND P_UNTERNEHMEN_NAME = AUTOMATISIERUNG.UNTERNEHMENSNAME
        AND P_PROJEKT_ID = AUTOMATISIERUNG.PROJEKTNUMMER_FUER_PRUEFANLAGE
        AND P_PRUEFANLAGE_ID = AUTOMATISIERUNG.PRUEFANLAGENNUMMER;
    P_ERROR_CODE := SQL%ROWCOUNT;
    IF (P_ERROR_CODE = 1) THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        P_ERROR_CODE := SQLCODE;
END P_DELETE_AUTOMATISIERUNG;
/

--- Create Views ---
CREATE VIEW ALLE_AUTOMATISIERUNGSTECHNIKER AS
    SELECT
        MITARBEITER.NACHNAME,
        MITARBEITER.VORNAME,
        MITARBEITER.UNTERNEHMENSNAME,
        AUTOMATISIERUNGSTECHNIKER.AUTOMATISIERUNGSTECHNIKER_ID
    FROM
        MITARBEITER
        INNER JOIN AUTOMATISIERUNGSTECHNIKER
        ON MITARBEITER.MITARBEITERID = AUTOMATISIERUNGSTECHNIKER.AUTOMATISIERUNGSTECHNIKER_ID
    ORDER BY
        MITARBEITER.NACHNAME ASC;

CREATE VIEW ALLE_KONSTRUKTEURE AS
    SELECT
        MITARBEITER.NACHNAME,
        MITARBEITER.VORNAME,
        MITARBEITER.UNTERNEHMENSNAME,
        KONSTRUKTEUR.KONSTRUKTEUR_ID
    FROM
        MITARBEITER
        INNER JOIN KONSTRUKTEUR
        ON MITARBEITER.MITARBEITERID = KONSTRUKTEUR.KONSTRUKTEUR_ID
    ORDER BY
        MITARBEITER.NACHNAME ASC;